/*
 *  ZKMRNHALPlugIn.cpp
 *  Zirkonium
 *
 *  Created by Chandrasekhar Ramakrishnan on 28.02.07.
 *  Copyright 2007 C. Ramakrishnan/ZKM. All rights reserved.
 *
 */

#include "ZKMRNHALPlugIn.h"
#include "ZKMRNHALPlugInImpl.h"

#include <CoreFoundation/CoreFoundation.h>

//  UUID generated by /usr/bin/uuidgen
//  CDB2D1C9-5E00-466C-AECE-F73E7259804C
#define kZirkoniumFactoryID																				\
            CFUUIDGetConstantUUIDWithBytes( NULL, 0xCD, 0xB2, 0xD1, 0xC9, 0x5E, 0x00, 0x46, 0x6C,	\
                                            0xAE, 0xCE, 0xF7, 0x3E, 0x72, 0x59, 0x80, 0x4C)

#ifdef __cplusplus
extern "C" {
#endif

// When an interface is released, decrement the refCount.
// If the refCount goes to zero, deallocate the instance.
static ULONG ZKMRNPlugInRelease(void * obj) {
	ZKMORHALPlugIn* THIS = (ZKMORHALPlugIn *)obj;
	THIS->mRefCount -= 1;
	if (0 == THIS->mRefCount) {
		ZKMRNDeallocPlugIn(THIS);
		return 0;
	} else
		return THIS->mRefCount;
}

/// The AudioHardwarePlugInInterface function table.
static AudioHardwarePlugInInterface sAHInterfaceFtbl = 
{
	NULL,											// Required padding for COM
	ZKMORHALPlugInImpl::PlugInQueryInterface,		// These three are the required COM functions
	ZKMORHALPlugInImpl::PlugInAddRef,
	ZKMRNPlugInRelease,
	ZKMORHALPlugInImpl::Initialize,
	ZKMORHALPlugInImpl::Teardown,
	ZKMORHALPlugInImpl::DeviceAddIOProc,
	ZKMORHALPlugInImpl::DeviceRemoveIOProc,
	ZKMORHALPlugInImpl::DeviceStart,
	ZKMORHALPlugInImpl::DeviceStop,
	ZKMORHALPlugInImpl::DeviceRead,
	ZKMORHALPlugInImpl::DeviceGetCurrentTime,
	ZKMORHALPlugInImpl::DeviceTranslateTime,
	ZKMORHALPlugInImpl::DeviceGetPropertyInfo,
	ZKMORHALPlugInImpl::DeviceGetProperty,
	ZKMORHALPlugInImpl::DeviceSetProperty,
	ZKMORHALPlugInImpl::StreamGetPropertyInfo,
	ZKMORHALPlugInImpl::StreamGetProperty,
	ZKMORHALPlugInImpl::StreamSetProperty,
	ZKMORHALPlugInImpl::DeviceStartAtTime,
	ZKMORHALPlugInImpl::DeviceGetNearestStartTime
};

// Utility function that allocates a new instance.
ZKMORHALPlugIn *ZKMRNAllocPlugIn(CFUUIDRef factoryID) {

	// Allocate memory for the new instance.
	ZKMORHALPlugIn *newOne = (ZKMORHALPlugIn *) malloc(sizeof(ZKMORHALPlugIn));

	// Point to the function table
	newOne->mAHInterface = &sAHInterfaceFtbl;

	// Retain and keep an open instance refcount
	// for each factory.
	newOne->mFactoryID = (CFUUIDRef) CFRetain(factoryID);
	CFPlugInAddInstanceForFactory(factoryID);

	// This function returns the IUnknown interface
	// so set the refCount to one.
	newOne->mRefCount = 1;

	newOne->mPlugInImpl = new ZKMRNHALPlugInImpl((AudioHardwarePlugInRef) newOne);
	return newOne;
}

// Utility function that deallocates the instance when
// the refCount goes to zero.
void ZKMRNDeallocPlugIn(ZKMORHALPlugIn * obj) {
	CFUUIDRef factoryID = obj->mFactoryID;
	if (obj->mPlugInImpl) delete obj->mPlugInImpl;
	
	free(obj);
	if (factoryID) {
		CFPlugInRemoveInstanceForFactory(factoryID);
		CFRelease(factoryID);
	}
}

// Implementation of the factory function for this type.
void *ZKMRNPlugInFactory(CFAllocatorRef allocator, CFUUIDRef typeID) {
	// Don't create the plug-in if I'm inside Zirkonium
//	if (!HasBundleID()) return NULL;
	if (IsRunningInZirkonium()) return NULL;
	if (!IsZirkoniumReachable()) return NULL;
	
	// If correct type is being requested, allocate an
	// instance of TestType and return the IUnknown interface.
	if (CFEqual(typeID, kAudioHardwarePlugInTypeID)) {
		ZKMORHALPlugIn *result = ZKMRNAllocPlugIn(kZirkoniumFactoryID);
		return result;
	} else {
		// If the requested type is incorrect, return NULL.
		return NULL;
	}
}

Boolean HasBundleID()
{
	CFBundleRef bundle = CFBundleGetMainBundle();
	if (!bundle) return false;
	
	CFStringRef bundleID = CFBundleGetIdentifier(bundle);
	return (NULL != bundleID);
}


Boolean IsRunningInZirkonium()
{
	CFBundleRef bundle = CFBundleGetMainBundle();
	if (!bundle) return false;
	
	CFStringRef bundleID = CFBundleGetIdentifier(bundle);
	if (!bundleID) return false;
	 
	return (kCFCompareEqualTo == CFStringCompare(CFSTR("de.zkm.Zirkonium"), bundleID, 0));
}

Boolean IsZirkoniumReachable()
{
	ZKMCNDebugPrintf("IsZirkoniumReachable?\n"); 
	CFMessagePortRef zirkoniumServerPort = CFMessagePortCreateRemote(NULL, CFSTR("ZirkoniumHALServerPort"));
	if (NULL == zirkoniumServerPort) {
		ZKMCNDebugPrintf("NO!\n"); 	
		return false;
	}
	
	CFMessagePortInvalidate(zirkoniumServerPort);
	CFRelease(zirkoniumServerPort);
	ZKMCNDebugPrintf("YES!\n"); 		
	return true;
}

#ifdef __cplusplus
}
#endif